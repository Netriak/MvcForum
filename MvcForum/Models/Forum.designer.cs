#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcForum.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Forum")]
	public partial class ForumDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertForum_Post(Forum_Post instance);
    partial void UpdateForum_Post(Forum_Post instance);
    partial void DeleteForum_Post(Forum_Post instance);
    partial void InsertForum_User(Forum_User instance);
    partial void UpdateForum_User(Forum_User instance);
    partial void DeleteForum_User(Forum_User instance);
    partial void InsertForum_UserRoleLink(Forum_UserRoleLink instance);
    partial void UpdateForum_UserRoleLink(Forum_UserRoleLink instance);
    partial void DeleteForum_UserRoleLink(Forum_UserRoleLink instance);
    partial void InsertForum_ViewedPost(Forum_ViewedPost instance);
    partial void UpdateForum_ViewedPost(Forum_ViewedPost instance);
    partial void DeleteForum_ViewedPost(Forum_ViewedPost instance);
    partial void InsertForum_Thread(Forum_Thread instance);
    partial void UpdateForum_Thread(Forum_Thread instance);
    partial void DeleteForum_Thread(Forum_Thread instance);
    partial void InsertForum_Role(Forum_Role instance);
    partial void UpdateForum_Role(Forum_Role instance);
    partial void DeleteForum_Role(Forum_Role instance);
    partial void InsertForum_Category(Forum_Category instance);
    partial void UpdateForum_Category(Forum_Category instance);
    partial void DeleteForum_Category(Forum_Category instance);
    partial void InsertForum_Session(Forum_Session instance);
    partial void UpdateForum_Session(Forum_Session instance);
    partial void DeleteForum_Session(Forum_Session instance);
    partial void InsertForum_PermissionsLink(Forum_PermissionsLink instance);
    partial void UpdateForum_PermissionsLink(Forum_PermissionsLink instance);
    partial void DeleteForum_PermissionsLink(Forum_PermissionsLink instance);
    partial void InsertForum_Permission(Forum_Permission instance);
    partial void UpdateForum_Permission(Forum_Permission instance);
    partial void DeleteForum_Permission(Forum_Permission instance);
    #endregion
		
		public ForumDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ForumConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Forum_Post> Forum_Posts
		{
			get
			{
				return this.GetTable<Forum_Post>();
			}
		}
		
		public System.Data.Linq.Table<Forum_User> Forum_Users
		{
			get
			{
				return this.GetTable<Forum_User>();
			}
		}
		
		public System.Data.Linq.Table<Forum_UserRoleLink> Forum_UserRoleLinks
		{
			get
			{
				return this.GetTable<Forum_UserRoleLink>();
			}
		}
		
		public System.Data.Linq.Table<Forum_ViewedPost> Forum_ViewedPosts
		{
			get
			{
				return this.GetTable<Forum_ViewedPost>();
			}
		}
		
		public System.Data.Linq.Table<Forum_Thread> Forum_Threads
		{
			get
			{
				return this.GetTable<Forum_Thread>();
			}
		}
		
		public System.Data.Linq.Table<Forum_Role> Forum_Roles
		{
			get
			{
				return this.GetTable<Forum_Role>();
			}
		}
		
		public System.Data.Linq.Table<Forum_Category> Forum_Categories
		{
			get
			{
				return this.GetTable<Forum_Category>();
			}
		}
		
		public System.Data.Linq.Table<Forum_Session> Forum_Sessions
		{
			get
			{
				return this.GetTable<Forum_Session>();
			}
		}
		
		public System.Data.Linq.Table<Forum_PermissionsLink> Forum_PermissionsLinks
		{
			get
			{
				return this.GetTable<Forum_PermissionsLink>();
			}
		}
		
		public System.Data.Linq.Table<Forum_Permission> Forum_Permissions
		{
			get
			{
				return this.GetTable<Forum_Permission>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.udf_postsSearch", IsComposable=true)]
		public IQueryable<udf_postsSearchResult> udf_postsSearch([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] string keywords)
		{
			return this.CreateMethodCallQuery<udf_postsSearchResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), keywords);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.udf_threadsSearch", IsComposable=true)]
		public IQueryable<udf_threadsSearchResult> udf_threadsSearch([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(4000)")] string keywords)
		{
			return this.CreateMethodCallQuery<udf_threadsSearchResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), keywords);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Posts")]
	public partial class Forum_Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostID;
		
		private int _PosterID;
		
		private int _ThreadID;
		
		private string _PostText;
		
		private System.DateTime _TimeStamp;
		
		private EntityRef<Forum_User> _Forum_User;
		
		private EntityRef<Forum_Thread> _Forum_Thread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIDChanging(int value);
    partial void OnPostIDChanged();
    partial void OnPosterIDChanging(int value);
    partial void OnPosterIDChanged();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnPostTextChanging(string value);
    partial void OnPostTextChanged();
    partial void OnTimeStampChanging(System.DateTime value);
    partial void OnTimeStampChanged();
    #endregion
		
		public Forum_Post()
		{
			this._Forum_User = default(EntityRef<Forum_User>);
			this._Forum_Thread = default(EntityRef<Forum_Thread>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosterID", DbType="Int NOT NULL")]
		public int PosterID
		{
			get
			{
				return this._PosterID;
			}
			set
			{
				if ((this._PosterID != value))
				{
					if (this._Forum_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosterIDChanging(value);
					this.SendPropertyChanging();
					this._PosterID = value;
					this.SendPropertyChanged("PosterID");
					this.OnPosterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL")]
		public int ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					if (this._Forum_Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PostText
		{
			get
			{
				return this._PostText;
			}
			set
			{
				if ((this._PostText != value))
				{
					this.OnPostTextChanging(value);
					this.SendPropertyChanging();
					this._PostText = value;
					this.SendPropertyChanged("PostText");
					this.OnPostTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeStamp", DbType="DateTime2 NOT NULL")]
		public System.DateTime TimeStamp
		{
			get
			{
				return this._TimeStamp;
			}
			set
			{
				if ((this._TimeStamp != value))
				{
					this.OnTimeStampChanging(value);
					this.SendPropertyChanging();
					this._TimeStamp = value;
					this.SendPropertyChanged("TimeStamp");
					this.OnTimeStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_Post", Storage="_Forum_User", ThisKey="PosterID", OtherKey="UserID", IsForeignKey=true)]
		public Forum_User Forum_User
		{
			get
			{
				return this._Forum_User.Entity;
			}
			set
			{
				Forum_User previousValue = this._Forum_User.Entity;
				if (((previousValue != value) 
							|| (this._Forum_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_User.Entity = null;
						previousValue.Forum_Posts.Remove(this);
					}
					this._Forum_User.Entity = value;
					if ((value != null))
					{
						value.Forum_Posts.Add(this);
						this._PosterID = value.UserID;
					}
					else
					{
						this._PosterID = default(int);
					}
					this.SendPropertyChanged("Forum_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Thread_Forum_Post", Storage="_Forum_Thread", ThisKey="ThreadID", OtherKey="ThreadID", IsForeignKey=true)]
		public Forum_Thread Forum_Thread
		{
			get
			{
				return this._Forum_Thread.Entity;
			}
			set
			{
				Forum_Thread previousValue = this._Forum_Thread.Entity;
				if (((previousValue != value) 
							|| (this._Forum_Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_Thread.Entity = null;
						previousValue.Forum_Posts.Remove(this);
					}
					this._Forum_Thread.Entity = value;
					if ((value != null))
					{
						value.Forum_Posts.Add(this);
						this._ThreadID = value.ThreadID;
					}
					else
					{
						this._ThreadID = default(int);
					}
					this.SendPropertyChanged("Forum_Thread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Forum_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Username;
		
		private string _Email;
		
		private bool _Approved;
		
		private string _PasswordHash;
		
		private string _Salt;
		
		private EntitySet<Forum_Post> _Forum_Posts;
		
		private EntitySet<Forum_UserRoleLink> _Forum_UserRoleLinks;
		
		private EntitySet<Forum_ViewedPost> _Forum_ViewedPosts;
		
		private EntitySet<Forum_Thread> _Forum_Threads;
		
		private EntitySet<Forum_Session> _Forum_Sessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSaltChanging(string value);
    partial void OnSaltChanged();
    #endregion
		
		public Forum_User()
		{
			this._Forum_Posts = new EntitySet<Forum_Post>(new Action<Forum_Post>(this.attach_Forum_Posts), new Action<Forum_Post>(this.detach_Forum_Posts));
			this._Forum_UserRoleLinks = new EntitySet<Forum_UserRoleLink>(new Action<Forum_UserRoleLink>(this.attach_Forum_UserRoleLinks), new Action<Forum_UserRoleLink>(this.detach_Forum_UserRoleLinks));
			this._Forum_ViewedPosts = new EntitySet<Forum_ViewedPost>(new Action<Forum_ViewedPost>(this.attach_Forum_ViewedPosts), new Action<Forum_ViewedPost>(this.detach_Forum_ViewedPosts));
			this._Forum_Threads = new EntitySet<Forum_Thread>(new Action<Forum_Thread>(this.attach_Forum_Threads), new Action<Forum_Thread>(this.detach_Forum_Threads));
			this._Forum_Sessions = new EntitySet<Forum_Session>(new Action<Forum_Session>(this.attach_Forum_Sessions), new Action<Forum_Session>(this.detach_Forum_Sessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(70) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="Char(44) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="Char(12) NOT NULL", CanBeNull=false)]
		public string Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_Post", Storage="_Forum_Posts", ThisKey="UserID", OtherKey="PosterID")]
		public EntitySet<Forum_Post> Forum_Posts
		{
			get
			{
				return this._Forum_Posts;
			}
			set
			{
				this._Forum_Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_UserRoleLink", Storage="_Forum_UserRoleLinks", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Forum_UserRoleLink> Forum_UserRoleLinks
		{
			get
			{
				return this._Forum_UserRoleLinks;
			}
			set
			{
				this._Forum_UserRoleLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_ViewedPost", Storage="_Forum_ViewedPosts", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Forum_ViewedPost> Forum_ViewedPosts
		{
			get
			{
				return this._Forum_ViewedPosts;
			}
			set
			{
				this._Forum_ViewedPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_Thread", Storage="_Forum_Threads", ThisKey="UserID", OtherKey="PosterID")]
		public EntitySet<Forum_Thread> Forum_Threads
		{
			get
			{
				return this._Forum_Threads;
			}
			set
			{
				this._Forum_Threads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_Session", Storage="_Forum_Sessions", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<Forum_Session> Forum_Sessions
		{
			get
			{
				return this._Forum_Sessions;
			}
			set
			{
				this._Forum_Sessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forum_Posts(Forum_Post entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = this;
		}
		
		private void detach_Forum_Posts(Forum_Post entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = null;
		}
		
		private void attach_Forum_UserRoleLinks(Forum_UserRoleLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = this;
		}
		
		private void detach_Forum_UserRoleLinks(Forum_UserRoleLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = null;
		}
		
		private void attach_Forum_ViewedPosts(Forum_ViewedPost entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = this;
		}
		
		private void detach_Forum_ViewedPosts(Forum_ViewedPost entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = null;
		}
		
		private void attach_Forum_Threads(Forum_Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = this;
		}
		
		private void detach_Forum_Threads(Forum_Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = null;
		}
		
		private void attach_Forum_Sessions(Forum_Session entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = this;
		}
		
		private void detach_Forum_Sessions(Forum_Session entity)
		{
			this.SendPropertyChanging();
			entity.Forum_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleLink")]
	public partial class Forum_UserRoleLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _RoleID;
		
		private EntityRef<Forum_User> _Forum_User;
		
		private EntityRef<Forum_Role> _Forum_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    #endregion
		
		public Forum_UserRoleLink()
		{
			this._Forum_User = default(EntityRef<Forum_User>);
			this._Forum_Role = default(EntityRef<Forum_Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Forum_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Forum_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_UserRoleLink", Storage="_Forum_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Forum_User Forum_User
		{
			get
			{
				return this._Forum_User.Entity;
			}
			set
			{
				Forum_User previousValue = this._Forum_User.Entity;
				if (((previousValue != value) 
							|| (this._Forum_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_User.Entity = null;
						previousValue.Forum_UserRoleLinks.Remove(this);
					}
					this._Forum_User.Entity = value;
					if ((value != null))
					{
						value.Forum_UserRoleLinks.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Forum_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Role_Forum_UserRoleLink", Storage="_Forum_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Forum_Role Forum_Role
		{
			get
			{
				return this._Forum_Role.Entity;
			}
			set
			{
				Forum_Role previousValue = this._Forum_Role.Entity;
				if (((previousValue != value) 
							|| (this._Forum_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_Role.Entity = null;
						previousValue.Forum_UserRoleLinks.Remove(this);
					}
					this._Forum_Role.Entity = value;
					if ((value != null))
					{
						value.Forum_UserRoleLinks.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Forum_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewedPosts")]
	public partial class Forum_ViewedPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _ThreadID;
		
		private int _LastPost;
		
		private EntityRef<Forum_User> _Forum_User;
		
		private EntityRef<Forum_Thread> _Forum_Thread;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnLastPostChanging(int value);
    partial void OnLastPostChanged();
    #endregion
		
		public Forum_ViewedPost()
		{
			this._Forum_User = default(EntityRef<Forum_User>);
			this._Forum_Thread = default(EntityRef<Forum_Thread>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Forum_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					if (this._Forum_Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPost", DbType="Int NOT NULL")]
		public int LastPost
		{
			get
			{
				return this._LastPost;
			}
			set
			{
				if ((this._LastPost != value))
				{
					this.OnLastPostChanging(value);
					this.SendPropertyChanging();
					this._LastPost = value;
					this.SendPropertyChanged("LastPost");
					this.OnLastPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_ViewedPost", Storage="_Forum_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Forum_User Forum_User
		{
			get
			{
				return this._Forum_User.Entity;
			}
			set
			{
				Forum_User previousValue = this._Forum_User.Entity;
				if (((previousValue != value) 
							|| (this._Forum_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_User.Entity = null;
						previousValue.Forum_ViewedPosts.Remove(this);
					}
					this._Forum_User.Entity = value;
					if ((value != null))
					{
						value.Forum_ViewedPosts.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Forum_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Thread_Forum_ViewedPost", Storage="_Forum_Thread", ThisKey="ThreadID", OtherKey="ThreadID", IsForeignKey=true)]
		public Forum_Thread Forum_Thread
		{
			get
			{
				return this._Forum_Thread.Entity;
			}
			set
			{
				Forum_Thread previousValue = this._Forum_Thread.Entity;
				if (((previousValue != value) 
							|| (this._Forum_Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_Thread.Entity = null;
						previousValue.Forum_ViewedPosts.Remove(this);
					}
					this._Forum_Thread.Entity = value;
					if ((value != null))
					{
						value.Forum_ViewedPosts.Add(this);
						this._ThreadID = value.ThreadID;
					}
					else
					{
						this._ThreadID = default(int);
					}
					this.SendPropertyChanged("Forum_Thread");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Threads")]
	public partial class Forum_Thread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ThreadID;
		
		private int _PosterID;
		
		private string _Title;
		
		private System.DateTime _LastPostTime;
		
		private int _Posts;
		
		private bool _Locked;
		
		private int _CategoryID;
		
		private EntitySet<Forum_Post> _Forum_Posts;
		
		private EntitySet<Forum_ViewedPost> _Forum_ViewedPosts;
		
		private EntityRef<Forum_User> _Forum_User;
		
		private EntityRef<Forum_Category> _Forum_Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnThreadIDChanging(int value);
    partial void OnThreadIDChanged();
    partial void OnPosterIDChanging(int value);
    partial void OnPosterIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastPostTimeChanging(System.DateTime value);
    partial void OnLastPostTimeChanged();
    partial void OnPostsChanging(int value);
    partial void OnPostsChanged();
    partial void OnLockedChanging(bool value);
    partial void OnLockedChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public Forum_Thread()
		{
			this._Forum_Posts = new EntitySet<Forum_Post>(new Action<Forum_Post>(this.attach_Forum_Posts), new Action<Forum_Post>(this.detach_Forum_Posts));
			this._Forum_ViewedPosts = new EntitySet<Forum_ViewedPost>(new Action<Forum_ViewedPost>(this.attach_Forum_ViewedPosts), new Action<Forum_ViewedPost>(this.detach_Forum_ViewedPosts));
			this._Forum_User = default(EntityRef<Forum_User>);
			this._Forum_Category = default(EntityRef<Forum_Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ThreadID
		{
			get
			{
				return this._ThreadID;
			}
			set
			{
				if ((this._ThreadID != value))
				{
					this.OnThreadIDChanging(value);
					this.SendPropertyChanging();
					this._ThreadID = value;
					this.SendPropertyChanged("ThreadID");
					this.OnThreadIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosterID", DbType="Int NOT NULL")]
		public int PosterID
		{
			get
			{
				return this._PosterID;
			}
			set
			{
				if ((this._PosterID != value))
				{
					if (this._Forum_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosterIDChanging(value);
					this.SendPropertyChanging();
					this._PosterID = value;
					this.SendPropertyChanged("PosterID");
					this.OnPosterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostTime", DbType="DateTime2 NOT NULL")]
		public System.DateTime LastPostTime
		{
			get
			{
				return this._LastPostTime;
			}
			set
			{
				if ((this._LastPostTime != value))
				{
					this.OnLastPostTimeChanging(value);
					this.SendPropertyChanging();
					this._LastPostTime = value;
					this.SendPropertyChanged("LastPostTime");
					this.OnLastPostTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Posts", DbType="Int NOT NULL")]
		public int Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				if ((this._Posts != value))
				{
					this.OnPostsChanging(value);
					this.SendPropertyChanging();
					this._Posts = value;
					this.SendPropertyChanged("Posts");
					this.OnPostsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Locked", DbType="Bit NOT NULL")]
		public bool Locked
		{
			get
			{
				return this._Locked;
			}
			set
			{
				if ((this._Locked != value))
				{
					this.OnLockedChanging(value);
					this.SendPropertyChanging();
					this._Locked = value;
					this.SendPropertyChanged("Locked");
					this.OnLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL")]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Forum_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Thread_Forum_Post", Storage="_Forum_Posts", ThisKey="ThreadID", OtherKey="ThreadID")]
		public EntitySet<Forum_Post> Forum_Posts
		{
			get
			{
				return this._Forum_Posts;
			}
			set
			{
				this._Forum_Posts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Thread_Forum_ViewedPost", Storage="_Forum_ViewedPosts", ThisKey="ThreadID", OtherKey="ThreadID")]
		public EntitySet<Forum_ViewedPost> Forum_ViewedPosts
		{
			get
			{
				return this._Forum_ViewedPosts;
			}
			set
			{
				this._Forum_ViewedPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_Thread", Storage="_Forum_User", ThisKey="PosterID", OtherKey="UserID", IsForeignKey=true)]
		public Forum_User Forum_User
		{
			get
			{
				return this._Forum_User.Entity;
			}
			set
			{
				Forum_User previousValue = this._Forum_User.Entity;
				if (((previousValue != value) 
							|| (this._Forum_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_User.Entity = null;
						previousValue.Forum_Threads.Remove(this);
					}
					this._Forum_User.Entity = value;
					if ((value != null))
					{
						value.Forum_Threads.Add(this);
						this._PosterID = value.UserID;
					}
					else
					{
						this._PosterID = default(int);
					}
					this.SendPropertyChanged("Forum_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Category_Forum_Thread", Storage="_Forum_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Forum_Category Forum_Category
		{
			get
			{
				return this._Forum_Category.Entity;
			}
			set
			{
				Forum_Category previousValue = this._Forum_Category.Entity;
				if (((previousValue != value) 
							|| (this._Forum_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_Category.Entity = null;
						previousValue.Forum_Threads.Remove(this);
					}
					this._Forum_Category.Entity = value;
					if ((value != null))
					{
						value.Forum_Threads.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Forum_Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forum_Posts(Forum_Post entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Thread = this;
		}
		
		private void detach_Forum_Posts(Forum_Post entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Thread = null;
		}
		
		private void attach_Forum_ViewedPosts(Forum_ViewedPost entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Thread = this;
		}
		
		private void detach_Forum_ViewedPosts(Forum_ViewedPost entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Thread = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Forum_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _Name;
		
		private bool _CanBeDeleted;
		
		private bool _AllowSearch;
		
		private EntitySet<Forum_UserRoleLink> _Forum_UserRoleLinks;
		
		private EntitySet<Forum_PermissionsLink> _PermissionsLinks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCanBeDeletedChanging(bool value);
    partial void OnCanBeDeletedChanged();
    partial void OnAllowSearchChanging(bool value);
    partial void OnAllowSearchChanged();
    #endregion
		
		public Forum_Role()
		{
			this._Forum_UserRoleLinks = new EntitySet<Forum_UserRoleLink>(new Action<Forum_UserRoleLink>(this.attach_Forum_UserRoleLinks), new Action<Forum_UserRoleLink>(this.detach_Forum_UserRoleLinks));
			this._PermissionsLinks = new EntitySet<Forum_PermissionsLink>(new Action<Forum_PermissionsLink>(this.attach_PermissionsLinks), new Action<Forum_PermissionsLink>(this.detach_PermissionsLinks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(15) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CanBeDeleted", DbType="Bit NOT NULL")]
		public bool CanBeDeleted
		{
			get
			{
				return this._CanBeDeleted;
			}
			set
			{
				if ((this._CanBeDeleted != value))
				{
					this.OnCanBeDeletedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDeleted = value;
					this.SendPropertyChanged("CanBeDeleted");
					this.OnCanBeDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowSearch", DbType="Bit NOT NULL")]
		public bool AllowSearch
		{
			get
			{
				return this._AllowSearch;
			}
			set
			{
				if ((this._AllowSearch != value))
				{
					this.OnAllowSearchChanging(value);
					this.SendPropertyChanging();
					this._AllowSearch = value;
					this.SendPropertyChanged("AllowSearch");
					this.OnAllowSearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Role_Forum_UserRoleLink", Storage="_Forum_UserRoleLinks", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<Forum_UserRoleLink> Forum_UserRoleLinks
		{
			get
			{
				return this._Forum_UserRoleLinks;
			}
			set
			{
				this._Forum_UserRoleLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Role_Forum_PermissionsLink", Storage="_PermissionsLinks", ThisKey="RoleID", OtherKey="RoleID")]
		public EntitySet<Forum_PermissionsLink> Forum_PermissionsLinks
		{
			get
			{
				return this._PermissionsLinks;
			}
			set
			{
				this._PermissionsLinks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forum_UserRoleLinks(Forum_UserRoleLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Role = this;
		}
		
		private void detach_Forum_UserRoleLinks(Forum_UserRoleLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Role = null;
		}
		
		private void attach_PermissionsLinks(Forum_PermissionsLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Role = this;
		}
		
		private void detach_PermissionsLinks(Forum_PermissionsLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Forum_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryID;
		
		private string _Name;
		
		private System.Nullable<int> _ParentID;
		
		private int _Priority;
		
		private bool _AllowPosts;
		
		private bool _InheritPermissions;
		
		private EntitySet<Forum_Thread> _Forum_Threads;
		
		private EntitySet<Forum_Category> _Forum_Categories;
		
		private EntitySet<Forum_PermissionsLink> _PermissionsLinks;
		
		private EntityRef<Forum_Category> _Category1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIDChanging(System.Nullable<int> value);
    partial void OnParentIDChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnAllowPostsChanging(bool value);
    partial void OnAllowPostsChanged();
    partial void OnInheritPermissionsChanging(bool value);
    partial void OnInheritPermissionsChanged();
    #endregion
		
		public Forum_Category()
		{
			this._Forum_Threads = new EntitySet<Forum_Thread>(new Action<Forum_Thread>(this.attach_Forum_Threads), new Action<Forum_Thread>(this.detach_Forum_Threads));
			this._Forum_Categories = new EntitySet<Forum_Category>(new Action<Forum_Category>(this.attach_Forum_Categories), new Action<Forum_Category>(this.detach_Forum_Categories));
			this._PermissionsLinks = new EntitySet<Forum_PermissionsLink>(new Action<Forum_PermissionsLink>(this.attach_PermissionsLinks), new Action<Forum_PermissionsLink>(this.detach_PermissionsLinks));
			this._Category1 = default(EntityRef<Forum_Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="Int")]
		public System.Nullable<int> ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					if (this._Category1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowPosts", DbType="Bit NOT NULL")]
		public bool AllowPosts
		{
			get
			{
				return this._AllowPosts;
			}
			set
			{
				if ((this._AllowPosts != value))
				{
					this.OnAllowPostsChanging(value);
					this.SendPropertyChanging();
					this._AllowPosts = value;
					this.SendPropertyChanged("AllowPosts");
					this.OnAllowPostsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InheritPermissions", DbType="Bit NOT NULL")]
		public bool InheritPermissions
		{
			get
			{
				return this._InheritPermissions;
			}
			set
			{
				if ((this._InheritPermissions != value))
				{
					this.OnInheritPermissionsChanging(value);
					this.SendPropertyChanging();
					this._InheritPermissions = value;
					this.SendPropertyChanged("InheritPermissions");
					this.OnInheritPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Category_Forum_Thread", Storage="_Forum_Threads", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Forum_Thread> Forum_Threads
		{
			get
			{
				return this._Forum_Threads;
			}
			set
			{
				this._Forum_Threads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Category_Forum_Category", Storage="_Forum_Categories", ThisKey="CategoryID", OtherKey="ParentID")]
		public EntitySet<Forum_Category> Forum_Categories
		{
			get
			{
				return this._Forum_Categories;
			}
			set
			{
				this._Forum_Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Category_Forum_PermissionsLink", Storage="_PermissionsLinks", ThisKey="CategoryID", OtherKey="CategoryID")]
		public EntitySet<Forum_PermissionsLink> Forum_PermissionsLinks
		{
			get
			{
				return this._PermissionsLinks;
			}
			set
			{
				this._PermissionsLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Category_Forum_Category", Storage="_Category1", ThisKey="ParentID", OtherKey="CategoryID", IsForeignKey=true)]
		public Forum_Category Category1
		{
			get
			{
				return this._Category1.Entity;
			}
			set
			{
				Forum_Category previousValue = this._Category1.Entity;
				if (((previousValue != value) 
							|| (this._Category1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category1.Entity = null;
						previousValue.Forum_Categories.Remove(this);
					}
					this._Category1.Entity = value;
					if ((value != null))
					{
						value.Forum_Categories.Add(this);
						this._ParentID = value.CategoryID;
					}
					else
					{
						this._ParentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Category1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forum_Threads(Forum_Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Category = this;
		}
		
		private void detach_Forum_Threads(Forum_Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Category = null;
		}
		
		private void attach_Forum_Categories(Forum_Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = this;
		}
		
		private void detach_Forum_Categories(Forum_Category entity)
		{
			this.SendPropertyChanging();
			entity.Category1 = null;
		}
		
		private void attach_PermissionsLinks(Forum_PermissionsLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Category = this;
		}
		
		private void detach_PermissionsLinks(Forum_PermissionsLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sessions")]
	public partial class Forum_Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SessionGUID;
		
		private int _UserID;
		
		private EntityRef<Forum_User> _Forum_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionGUIDChanging(string value);
    partial void OnSessionGUIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public Forum_Session()
		{
			this._Forum_User = default(EntityRef<Forum_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionGUID", DbType="Char(36) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SessionGUID
		{
			get
			{
				return this._SessionGUID;
			}
			set
			{
				if ((this._SessionGUID != value))
				{
					this.OnSessionGUIDChanging(value);
					this.SendPropertyChanging();
					this._SessionGUID = value;
					this.SendPropertyChanged("SessionGUID");
					this.OnSessionGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Forum_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_User_Forum_Session", Storage="_Forum_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public Forum_User Forum_User
		{
			get
			{
				return this._Forum_User.Entity;
			}
			set
			{
				Forum_User previousValue = this._Forum_User.Entity;
				if (((previousValue != value) 
							|| (this._Forum_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_User.Entity = null;
						previousValue.Forum_Sessions.Remove(this);
					}
					this._Forum_User.Entity = value;
					if ((value != null))
					{
						value.Forum_Sessions.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("Forum_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionsLink")]
	public partial class Forum_PermissionsLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private int _RoleID;
		
		private int _CategoryID;
		
		private EntityRef<Forum_Category> _Forum_Category;
		
		private EntityRef<Forum_Role> _Forum_Role;
		
		private EntityRef<Forum_Permission> _Forum_Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public Forum_PermissionsLink()
		{
			this._Forum_Category = default(EntityRef<Forum_Category>);
			this._Forum_Role = default(EntityRef<Forum_Role>);
			this._Forum_Permission = default(EntityRef<Forum_Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Forum_Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Forum_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._Forum_Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Category_Forum_PermissionsLink", Storage="_Forum_Category", ThisKey="CategoryID", OtherKey="CategoryID", IsForeignKey=true)]
		public Forum_Category Forum_Category
		{
			get
			{
				return this._Forum_Category.Entity;
			}
			set
			{
				Forum_Category previousValue = this._Forum_Category.Entity;
				if (((previousValue != value) 
							|| (this._Forum_Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_Category.Entity = null;
						previousValue.Forum_PermissionsLinks.Remove(this);
					}
					this._Forum_Category.Entity = value;
					if ((value != null))
					{
						value.Forum_PermissionsLinks.Add(this);
						this._CategoryID = value.CategoryID;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("Forum_Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Role_Forum_PermissionsLink", Storage="_Forum_Role", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public Forum_Role Forum_Role
		{
			get
			{
				return this._Forum_Role.Entity;
			}
			set
			{
				Forum_Role previousValue = this._Forum_Role.Entity;
				if (((previousValue != value) 
							|| (this._Forum_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_Role.Entity = null;
						previousValue.Forum_PermissionsLinks.Remove(this);
					}
					this._Forum_Role.Entity = value;
					if ((value != null))
					{
						value.Forum_PermissionsLinks.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Forum_Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Permission_Forum_PermissionsLink", Storage="_Forum_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Forum_Permission Forum_Permission
		{
			get
			{
				return this._Forum_Permission.Entity;
			}
			set
			{
				Forum_Permission previousValue = this._Forum_Permission.Entity;
				if (((previousValue != value) 
							|| (this._Forum_Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum_Permission.Entity = null;
						previousValue.Forum_PermissionsLinks.Remove(this);
					}
					this._Forum_Permission.Entity = value;
					if ((value != null))
					{
						value.Forum_PermissionsLinks.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Forum_Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Forum_Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private string _Name;
		
		private bool _AllowView;
		
		private bool _AllowNewThread;
		
		private bool _AllowReply;
		
		private bool _AllowEditOwnPost;
		
		private bool _AllowLink;
		
		private bool _AllowPicture;
		
		private bool _AllowEditAllPosts;
		
		private bool _AllowDeleteOwnThread;
		
		private bool _AllowDeleteAllThread;
		
		private bool _AllowDeleteOwnPost;
		
		private bool _AllowDeleteAllPosts;
		
		private bool _AllowLockThread;
		
		private bool _AllowMoveThread;
		
		private EntitySet<Forum_PermissionsLink> _Forum_PermissionsLinks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAllowViewChanging(bool value);
    partial void OnAllowViewChanged();
    partial void OnAllowNewThreadChanging(bool value);
    partial void OnAllowNewThreadChanged();
    partial void OnAllowReplyChanging(bool value);
    partial void OnAllowReplyChanged();
    partial void OnAllowEditOwnPostChanging(bool value);
    partial void OnAllowEditOwnPostChanged();
    partial void OnAllowLinkChanging(bool value);
    partial void OnAllowLinkChanged();
    partial void OnAllowPictureChanging(bool value);
    partial void OnAllowPictureChanged();
    partial void OnAllowEditAllPostsChanging(bool value);
    partial void OnAllowEditAllPostsChanged();
    partial void OnAllowDeleteOwnThreadChanging(bool value);
    partial void OnAllowDeleteOwnThreadChanged();
    partial void OnAllowDeleteAllThreadChanging(bool value);
    partial void OnAllowDeleteAllThreadChanged();
    partial void OnAllowDeleteOwnPostChanging(bool value);
    partial void OnAllowDeleteOwnPostChanged();
    partial void OnAllowDeleteAllPostsChanging(bool value);
    partial void OnAllowDeleteAllPostsChanged();
    partial void OnAllowLockThreadChanging(bool value);
    partial void OnAllowLockThreadChanged();
    partial void OnAllowMoveThreadChanging(bool value);
    partial void OnAllowMoveThreadChanged();
    #endregion
		
		public Forum_Permission()
		{
			this._Forum_PermissionsLinks = new EntitySet<Forum_PermissionsLink>(new Action<Forum_PermissionsLink>(this.attach_Forum_PermissionsLinks), new Action<Forum_PermissionsLink>(this.detach_Forum_PermissionsLinks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowView", DbType="Bit NOT NULL")]
		public bool AllowView
		{
			get
			{
				return this._AllowView;
			}
			set
			{
				if ((this._AllowView != value))
				{
					this.OnAllowViewChanging(value);
					this.SendPropertyChanging();
					this._AllowView = value;
					this.SendPropertyChanged("AllowView");
					this.OnAllowViewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowNewThread", DbType="Bit NOT NULL")]
		public bool AllowNewThread
		{
			get
			{
				return this._AllowNewThread;
			}
			set
			{
				if ((this._AllowNewThread != value))
				{
					this.OnAllowNewThreadChanging(value);
					this.SendPropertyChanging();
					this._AllowNewThread = value;
					this.SendPropertyChanged("AllowNewThread");
					this.OnAllowNewThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowReply", DbType="Bit NOT NULL")]
		public bool AllowReply
		{
			get
			{
				return this._AllowReply;
			}
			set
			{
				if ((this._AllowReply != value))
				{
					this.OnAllowReplyChanging(value);
					this.SendPropertyChanging();
					this._AllowReply = value;
					this.SendPropertyChanged("AllowReply");
					this.OnAllowReplyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowEditOwnPost", DbType="Bit NOT NULL")]
		public bool AllowEditOwnPost
		{
			get
			{
				return this._AllowEditOwnPost;
			}
			set
			{
				if ((this._AllowEditOwnPost != value))
				{
					this.OnAllowEditOwnPostChanging(value);
					this.SendPropertyChanging();
					this._AllowEditOwnPost = value;
					this.SendPropertyChanged("AllowEditOwnPost");
					this.OnAllowEditOwnPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowLink", DbType="Bit NOT NULL")]
		public bool AllowLink
		{
			get
			{
				return this._AllowLink;
			}
			set
			{
				if ((this._AllowLink != value))
				{
					this.OnAllowLinkChanging(value);
					this.SendPropertyChanging();
					this._AllowLink = value;
					this.SendPropertyChanged("AllowLink");
					this.OnAllowLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowPicture", DbType="Bit NOT NULL")]
		public bool AllowPicture
		{
			get
			{
				return this._AllowPicture;
			}
			set
			{
				if ((this._AllowPicture != value))
				{
					this.OnAllowPictureChanging(value);
					this.SendPropertyChanging();
					this._AllowPicture = value;
					this.SendPropertyChanged("AllowPicture");
					this.OnAllowPictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowEditAllPosts", DbType="Bit NOT NULL")]
		public bool AllowEditAllPosts
		{
			get
			{
				return this._AllowEditAllPosts;
			}
			set
			{
				if ((this._AllowEditAllPosts != value))
				{
					this.OnAllowEditAllPostsChanging(value);
					this.SendPropertyChanging();
					this._AllowEditAllPosts = value;
					this.SendPropertyChanged("AllowEditAllPosts");
					this.OnAllowEditAllPostsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowDeleteOwnThread", DbType="Bit NOT NULL")]
		public bool AllowDeleteOwnThread
		{
			get
			{
				return this._AllowDeleteOwnThread;
			}
			set
			{
				if ((this._AllowDeleteOwnThread != value))
				{
					this.OnAllowDeleteOwnThreadChanging(value);
					this.SendPropertyChanging();
					this._AllowDeleteOwnThread = value;
					this.SendPropertyChanged("AllowDeleteOwnThread");
					this.OnAllowDeleteOwnThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowDeleteAllThread", DbType="Bit NOT NULL")]
		public bool AllowDeleteAllThread
		{
			get
			{
				return this._AllowDeleteAllThread;
			}
			set
			{
				if ((this._AllowDeleteAllThread != value))
				{
					this.OnAllowDeleteAllThreadChanging(value);
					this.SendPropertyChanging();
					this._AllowDeleteAllThread = value;
					this.SendPropertyChanged("AllowDeleteAllThread");
					this.OnAllowDeleteAllThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowDeleteOwnPost", DbType="Bit NOT NULL")]
		public bool AllowDeleteOwnPost
		{
			get
			{
				return this._AllowDeleteOwnPost;
			}
			set
			{
				if ((this._AllowDeleteOwnPost != value))
				{
					this.OnAllowDeleteOwnPostChanging(value);
					this.SendPropertyChanging();
					this._AllowDeleteOwnPost = value;
					this.SendPropertyChanged("AllowDeleteOwnPost");
					this.OnAllowDeleteOwnPostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowDeleteAllPosts", DbType="Bit NOT NULL")]
		public bool AllowDeleteAllPosts
		{
			get
			{
				return this._AllowDeleteAllPosts;
			}
			set
			{
				if ((this._AllowDeleteAllPosts != value))
				{
					this.OnAllowDeleteAllPostsChanging(value);
					this.SendPropertyChanging();
					this._AllowDeleteAllPosts = value;
					this.SendPropertyChanged("AllowDeleteAllPosts");
					this.OnAllowDeleteAllPostsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowLockThread", DbType="Bit NOT NULL")]
		public bool AllowLockThread
		{
			get
			{
				return this._AllowLockThread;
			}
			set
			{
				if ((this._AllowLockThread != value))
				{
					this.OnAllowLockThreadChanging(value);
					this.SendPropertyChanging();
					this._AllowLockThread = value;
					this.SendPropertyChanged("AllowLockThread");
					this.OnAllowLockThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowMoveThread", DbType="Bit NOT NULL")]
		public bool AllowMoveThread
		{
			get
			{
				return this._AllowMoveThread;
			}
			set
			{
				if ((this._AllowMoveThread != value))
				{
					this.OnAllowMoveThreadChanging(value);
					this.SendPropertyChanging();
					this._AllowMoveThread = value;
					this.SendPropertyChanged("AllowMoveThread");
					this.OnAllowMoveThreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Permission_Forum_PermissionsLink", Storage="_Forum_PermissionsLinks", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<Forum_PermissionsLink> Forum_PermissionsLinks
		{
			get
			{
				return this._Forum_PermissionsLinks;
			}
			set
			{
				this._Forum_PermissionsLinks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forum_PermissionsLinks(Forum_PermissionsLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Permission = this;
		}
		
		private void detach_Forum_PermissionsLinks(Forum_PermissionsLink entity)
		{
			this.SendPropertyChanging();
			entity.Forum_Permission = null;
		}
	}
	
	public partial class udf_postsSearchResult
	{
		
		private int _KEY;
		
		private System.Nullable<int> _RANK;
		
		public udf_postsSearchResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[KEY]", Storage="_KEY", DbType="Int NOT NULL")]
		public int KEY
		{
			get
			{
				return this._KEY;
			}
			set
			{
				if ((this._KEY != value))
				{
					this._KEY = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RANK", DbType="Int")]
		public System.Nullable<int> RANK
		{
			get
			{
				return this._RANK;
			}
			set
			{
				if ((this._RANK != value))
				{
					this._RANK = value;
				}
			}
		}
	}
	
	public partial class udf_threadsSearchResult
	{
		
		private int _KEY;
		
		private System.Nullable<int> _RANK;
		
		public udf_threadsSearchResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[KEY]", Storage="_KEY", DbType="Int NOT NULL")]
		public int KEY
		{
			get
			{
				return this._KEY;
			}
			set
			{
				if ((this._KEY != value))
				{
					this._KEY = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RANK", DbType="Int")]
		public System.Nullable<int> RANK
		{
			get
			{
				return this._RANK;
			}
			set
			{
				if ((this._RANK != value))
				{
					this._RANK = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
